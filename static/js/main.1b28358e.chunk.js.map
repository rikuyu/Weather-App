{"version":3,"sources":["store/types.ts","components/InputCityName.tsx","store/actions/handleWeather.tsx","components/ErrorMsg.tsx","components/ResultWeather.tsx","App.tsx","store/reducers/weatherReducer.tsx","store/index.tsx","index.tsx"],"names":["GET_WEATHER","SET_LOADING","SET_ERROR","InputCityName","title","dispatch","useDispatch","useState","cityName","setCityName","className","onSubmit","e","city","preventDefault","type","a","fetch","process","res","ok","json","resData","Error","message","payload","placeholder","value","onChange","currentTarget","ErrorMsg","ResultWeather","data","celsius","main","temp","toFixed","name","sys","country","weather","description","src","icon","alt","humidity","pressure","wind","speed","App","weatherData","useSelector","state","loading","error","console","log","initialState","weatherReducer","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b28358e.chunk.js","sourcesContent":["export const GET_WEATHER = \"GET_WEATHER\",\r\n  SET_LOADING = \"SET_LOADING\",\r\n  SET_ERROR = \"SET_ERROR\",\r\n  SET_ALERT = \"SET_ALERT\";\r\n\r\nexport interface Weather {\r\n  description: string;\r\n  icon: string;\r\n  id: number;\r\n  main: string;\r\n}\r\n\r\nexport interface WeatherData {\r\n  base: string;\r\n  clouds: {\r\n    all: number;\r\n  };\r\n  cod: number;\r\n  coord: {\r\n    lon: number;\r\n    lat: number;\r\n  };\r\n  dt: number;\r\n  id: number;\r\n  main: {\r\n    feels_like: number;\r\n    humidity: number;\r\n    pressure: number;\r\n    temp: number;\r\n    temp_max: number;\r\n    temp_min: number;\r\n  };\r\n  name: string;\r\n  sys: {\r\n    country: string;\r\n    id: number;\r\n    sunrise: number;\r\n    sunset: number;\r\n    type: number;\r\n  };\r\n  timezone: number;\r\n  visibility: number;\r\n  weather: Weather[];\r\n  wind: {\r\n    speed: number;\r\n    deg: number;\r\n  };\r\n}\r\n\r\nexport interface WeatherError {\r\n  cod: string;\r\n  message: string;\r\n}\r\n\r\nexport interface WeatherState {\r\n  data: WeatherData | null;\r\n  loading: boolean;\r\n  error: boolean;\r\n}\r\n\r\ninterface GetWeatherAction {\r\n  type: typeof GET_WEATHER;\r\n  payload: WeatherData;\r\n}\r\n\r\ninterface SetLoadingAction {\r\n  type: typeof SET_LOADING;\r\n}\r\n\r\ninterface SetErrorAction {\r\n  type: typeof SET_ERROR;\r\n  payload: string;\r\n}\r\n\r\nexport type WeatherAction =\r\n  | GetWeatherAction\r\n  | SetLoadingAction\r\n  | SetErrorAction;\r\n\r\nexport interface AlertAction {\r\n  type: typeof SET_ALERT;\r\n  payload: string;\r\n}\r\n\r\nexport interface AlertState {\r\n  message: string;\r\n}\r\n","import React, { FC, useState, FormEvent } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getWeather, setLoading } from \"../store/actions/handleWeather\";\r\n\r\ninterface SearchProps {\r\n  title: string;\r\n}\r\n\r\nconst InputCityName: FC<SearchProps> = ({ title }) => {\r\n  const dispatch = useDispatch();\r\n  const [cityName, setCityName] = useState(\"\");\r\n\r\n  const changeHandler = (e: FormEvent<HTMLInputElement>) => {\r\n    setCityName(e.currentTarget.value);\r\n  };\r\n\r\n  const submitHandler = (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    dispatch(setLoading());\r\n    dispatch(getWeather(cityName));\r\n    setCityName(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"mb-3\">\r\n      <h1 className=\"text-white font-mono text-xl text-center mb-4 mt-3\">\r\n        {title}\r\n      </h1>\r\n      <form onSubmit={submitHandler} className=\"flex justify-center\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"場所名をローマ字で入力 (Ex. Tokyo)\"\r\n          className=\"mt-1 w-8/12 p-3 focus:outline-none focus:ring focus:border-blue-300 rounded-xl\"\r\n          value={cityName}\r\n          onChange={changeHandler}\r\n        />\r\n        <button className=\"bg-red-300 hover:bg-red-400 py-1 px-4 text-white ml-1 rounded-xl\">\r\n          検索\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputCityName;\r\n","import { ThunkAction } from \"redux-thunk\";\r\nimport { RootState } from \"..\";\r\nimport {\r\n  WeatherAction,\r\n  WeatherData,\r\n  WeatherError,\r\n  GET_WEATHER,\r\n  SET_LOADING,\r\n  SET_ERROR,\r\n} from \"../types\";\r\n\r\nexport const getWeather = (\r\n  city: string\r\n): ThunkAction<void, RootState, null, WeatherAction> => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_API_KEY}`\r\n      );\r\n\r\n      if (!res.ok) {\r\n        const resData: WeatherError = await res.json();\r\n        throw new Error(resData.message);\r\n      }\r\n\r\n      const resData: WeatherData = await res.json();\r\n      dispatch({\r\n        type: GET_WEATHER,\r\n        payload: resData,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: SET_ERROR,\r\n        payload: err.message,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const setLoading = (): WeatherAction => {\r\n  return {\r\n    type: SET_LOADING,\r\n  };\r\n};\r\n\r\nexport const setError = (): WeatherAction => {\r\n  return {\r\n    type: SET_ERROR,\r\n    payload: \"\",\r\n  };\r\n};\r\n","const ErrorMsg = () => {\r\n  return (\r\n    <div className=\"flex justify-center my-8\">\r\n      <p className=\"text-white font-bold font-mono text-xl text-center pt-2 mx5\">\r\n        存在しない地名です。\r\n        <br />\r\n        （地名はローマ字で入力 Ex.Tokyo）\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorMsg;\r\n","import React, { FC } from \"react\";\r\nimport { WeatherData } from \"../store/types\";\r\n\r\ninterface WeatherProps {\r\n  data: WeatherData;\r\n}\r\n\r\nconst ResultWeather: FC<WeatherProps> = ({ data }) => {\r\n  const celsius = (data.main.temp - 273.15).toFixed(2);\r\n  return (\r\n    <div>\r\n      <div className=\"container flex flex-col items-center py-8 mb-20\">\r\n        <h1 className=\"text-white font-mono text-4xl \">\r\n          {data.name} in {data.sys.country}\r\n        </h1>\r\n\r\n        <p className=\"text-white font-mono text-3xl \">\r\n          天気：{data.weather[0].description}\r\n        </p>\r\n        <p>\r\n          <img\r\n            className=\"w-32 h-32 justify-center\"\r\n            src={`http://openweathermap.org/img/wn/${data.weather[0].icon}.png`}\r\n            alt=\"weather-img\"\r\n          />\r\n        </p>\r\n\r\n        <p className=\"text-white font-mono text-2xl \">気温：{celsius} ℃</p>\r\n\r\n        <p className=\"text-white font-mono text-2xl \">\r\n          湿度：{data.main.humidity} %\r\n        </p>\r\n\r\n        <p className=\"text-white font-mono text-2xl \">\r\n          気圧：{data.main.pressure}\r\n        </p>\r\n        <p></p>\r\n\r\n        <p className=\"text-white font-mono text-2xl \">\r\n          風速：{data.wind.speed} m/s\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResultWeather;\r\n","import React, { FC } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./App.css\";\n\nimport { RootState } from \"./store\";\nimport InputGeoName from \"./components/InputCityName\";\nimport ErrorMsg from \"./components/ErrorMsg\";\nimport ResultWeather from \"./components/ResultWeather\";\n\nconst App: FC = () => {\n  const weatherData = useSelector((state: RootState) => state.weather.data);\n  const loading = useSelector((state: RootState) => state.weather.loading);\n  const error = useSelector((state: RootState) => state.weather.error);\n\n  console.log(\"loading:\" + loading);\n  console.log(\"error:\" + error);\n\n  return (\n    <div className=\"mx-auto\">\n      <h1 className=\"text-white font-mono text-3xl text-center mt-10\">\n        天気取得アプリ\n      </h1>\n      <InputGeoName title=\"今の天気を調べる場所の名前を入力！！\" />\n      <div className=\"container mx-auto\">\n        {error && <ErrorMsg />}\n        {loading ? (\n          <h2 className=\"text-white font-mono text-2xl text-center my-5\">\n            天気情報取得中...\n          </h2>\n        ) : (\n          weatherData && <ResultWeather data={weatherData} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import {\r\n  WeatherState,\r\n  WeatherAction,\r\n  GET_WEATHER,\r\n  SET_LOADING,\r\n  SET_ERROR,\r\n} from \"../types\";\r\n\r\nconst initialState: WeatherState = {\r\n  data: null,\r\n  loading: false,\r\n  error: false,\r\n};\r\n\r\nconst weatherReducer = (\r\n  state = initialState,\r\n  action: WeatherAction\r\n): WeatherState => {\r\n  switch (action.type) {\r\n    case GET_WEATHER:\r\n      return {\r\n        data: action.payload,\r\n        loading: false,\r\n        error: false,\r\n      };\r\n    case SET_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case SET_ERROR:\r\n      return {\r\n        ...state,\r\n        error: true,\r\n        loading: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default weatherReducer;\r\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport weatherReducer from \"./reducers/weatherReducer\";\r\n// import alertReducer from \"./reducers/alertReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  weather: weatherReducer,\r\n  // alert: alertReducer,\r\n});\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}